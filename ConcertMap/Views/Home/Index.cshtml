@model ConcertMap.Models.Events

@using ConcertMap.App_Code.Helper

@{
    ViewBag.Title = "ConcertMap";
}

@section Scripts {

    
    <script>


        $(function () {

            $("#fromDate").attr("disabled","disabled");
            $("#toDate").attr("disabled","disabled");

            @{

                //Source of map color
                var concertData = MapManager.CreateCountryData(Model.events);

                //Source of map markers
                var markersData = MapManager.GetMarkers(Model.events);

                //Stat
                var stat = MapManager.CreateStat(concertData, Model.events);


            } 

            var markersDataSerialized = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(markersData))
            var concertDataSerialized = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(concertData));

            var mapObj = new jvm.Map({

                container: $('#world-map'),
                map: 'world_mill',
                normalizeFunction: 'polynomial',
                markerStyle: {
                    initial: {
                        fill: '#B88A99',
                        stroke: '#805563',
                        r: 3
                    }
                },
                backgroundColor: '#A1ABB5',
                markers: markersDataSerialized,
                series: {
                    regions: [{
                        values: concertDataSerialized,
                        scale: ['#33F259', '#176326'],
                        normalizeFunction: 'polynomial',
                        attribute: 'fill'
                    }]
                }
            });
        });


        function hide() {
            $("#show_button").show();
            $("#search_panel").hide("drop",{ direction: "left" }, "slow" );

        }


        function show() {
            $("#search_panel").show("drop",{ direction: "left" }, "slow" );
            $("#show_button").hide();
        }


        function upcomingChanged(cb) {

            var isChecked = $(cb).prop("checked");

            if (isChecked) {
                $("#fromDate").val(getCurrentDate());
                $("#fromDate").attr("disabled","disabled");
            } else
            {
                $("#fromDate").removeAttr("disabled");
            }

        }

        function pastChanged(cb) {
            
            var isChecked = $(cb).prop("checked");

            if (isChecked) {
                $("#toDate").val(getCurrentDate());
                $("#toDate").attr("disabled","disabled");
            } else {
                $("#toDate").removeAttr("disabled");
            }
        }

        function showStat() {
            $("#stat_panel").show("drop",{ direction: "right", complete: statPanelShowed }, "slow" );
            $("#stat_button").hide();
        }

        function hideStat() {
            $("#stat_button").show();
            $("#stat_panel").hide("drop",{ direction: "right", complete: statPanelHided }, "slow" );
        }

        function statPanelShowed() {
    
            //$("regionChart").css("display","block");

            var regionChart = createChart("regionChart");

            var countryChart = createChart("countryChart");
            
            var cityChart = createChart("cityChart");

            regionChart.render();
            countryChart.render();
            cityChart.render();
            
        }

        function createChart(containerName) {
    
            var chart = new CanvasJS.Chart(containerName, {
                title: {
                    text: "Region numbers",
                    fontFamily: "Verdana",
                    fontColor: "Peru",
                    fontSize: 28

                },
                width: 200,
                animationEnabled: true,
                axisY: {
                    tickThickness: 0,
                    lineThickness: 0,
                    valueFormatString: " ",
                    gridThickness: 0                    
                },
                axisX: {
                    tickThickness: 0,
                    lineThickness: 0,
                    labelFontSize: 18,
                    labelFontColor: "Peru",
                    interval:1
                },
                data: [
                {
                    indexLabelFontSize: 26,
                    toolTipContent: "<span style='\"'color: {color};'\"'><strong>{indexLabel}</strong></span><span style='\"'font-size: 20px; color:peru '\"'><strong>{y}</strong></span>",

                    indexLabelPlacement: "inside",
                    indexLabelFontColor: "white",
                    indexLabelFontWeight: 600,
                    indexLabelFontFamily: "Verdana",
                    color: "#62C9C3",
                    type: "bar",
                    dataPoints: [
                        { y: 21, label: "21%", indexLabel: "Video" },
                        { y: 25, label: "25%", indexLabel: "Dining" },
                        { y: 33, label: "33%", indexLabel: "Entertainment" },
                        { y: 36, label: "36%", indexLabel: "News" },
                        { y: 42, label: "42%", indexLabel: "Music" },
                        { y: 49, label: "49%", indexLabel: "Social Networking" },
                        { y: 50, label: "50%", indexLabel: "Maps/ Search" },
                        { y: 55, label: "55%", indexLabel: "Weather" },
                        { y: 61, label: "61%", indexLabel: "Games" }
                    ]
                }
                ]
            });

            return chart;
        }

        function statPanelHided() {

            //$("regionChart").css("display","none");

        }

        function getCurrentDate() {
    
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth()+1; 

            var yyyy = today.getFullYear();
            if(dd<10){
                dd='0'+dd
            } 
            if(mm<10){
                mm='0'+mm
            } 
            var today = yyyy+"-"+mm+"-"+dd;
            
            return today;
        }

    </script>
}

<div id="world-map" style="height: 100%"></div>

<div id="search_panel">
    <div id="title">Search</div>
  
    <div id="search_form">
        @using (Html.BeginForm("Search", "Home", FormMethod.Get))
        {
            <p>
                Artist: @Html.TextBoxFor(model => model.ArtistName) <button class="button">+</button><br />
                From: @Html.EditorFor(model => model.fromDate, new { @type = "date", id="fromDate"}) <br />
                To: @Html.EditorFor(model => model.toDate, new { @type = "date", id = "toDate"}) <br />
                Upcoming: @Html.CheckBoxFor(model => model.isUpcoming, new { @checked = "checked", id = "upcoming", onclick="upcomingChanged(this)" }) <br />
                Past: @Html.CheckBoxFor(model => model.isPast, new { @checked = "checked", id = "past", onclick = "pastChanged(this)" }) <br />
                <input class="button" type="submit" value="Search" id="search_button"/>
            </p>
        } 
    </div>

    <button onclick="hide()" id="hide_button" class="button">Hide</button>
</div>

<div id="stat_panel">
    
    <div id="stat_title">Statistics</div>

    <div id="regionChart" style="height: 300px; width: 280px; float:left; margin: 10px">
    </div>
    <div id="countryChart" style="height: 300px; width: 280px; float:left; margin: 10px">
    </div>
    <div id="cityChart" style="height: 300px; width: 280px; float:left; margin: 10px">
    </div>

    <button onclick="hideStat()" id="hideStat_button" class="button">Hide</button>
</div>

<button onclick="show()" id="show_button" class="button showSearchPanelButton">Search</button>

<button onclick="showStat()" id="stat_button" class="button showStatPanelButton">Stat</button>