@model ConcertMap.Models.Events

@using ConcertMap.App_Code.Helper

@{
    ViewBag.Title = "ConcertMap";
}

@section Scripts {

    <script>


        $(function () {

            $("#fromDate").attr('readonly',true);
            $("#toDate").attr('readonly',true);


            @{

                //Source of map color
                var concertData = MapManager.CreateCountryData(Model.events);

                //Source of map markers
                var markersData = MapManager.GetMarkers(Model.events);

                //Stat
                var stat = MapManager.CreateStat(concertData, Model.events);


            }

            var markersDataSerialized = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(markersData))
            var concertDataSerialized = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(concertData));

            localStorage.setItem("cityStat",JSON.stringify(@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(stat.CityStat))));
            localStorage.setItem("countryStat",JSON.stringify(@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(stat.CountryStat))));
            localStorage.setItem("regionStat",JSON.stringify(@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(stat.RegionStat))));
            localStorage.setItem("cityStatCount",@stat.CityStat.Count);
            localStorage.setItem("countryStatCount",@stat.CountryStat.Count);
            localStorage.setItem("regionStatCount",@stat.RegionStat.Count);
            localStorage.setItem("markers",JSON.stringify(markersDataSerialized));


            var mapObj = new jvm.Map({

                container: $('#world-map'),
                map: 'world_mill',
                normalizeFunction: 'polynomial',
                backgroundColor: '#A1ABB5',
                markers: markersDataSerialized,
                series: {
                    regions: [{
                        values: concertDataSerialized,
                        scale: ['#26a69a', '#004d40'],
                        normalizeFunction: 'polynomial',
                        attribute: 'fill'
                    }]
                },
                onMarkerTipShow: function(event, label, index){

                    var city = markersDataSerialized[index]["name"];

                    var labelname = city["name"]+":<br/>";

                    $.each(city["concerts"], function (i, value) {
                        labelname += "<span style='padding-left:20px'>" + value +"</span><br/>";
                    });

                   

                    label.html(labelname);
                }
            });

            $('input[type=hidden]').each(function (index, element) {
                $(element).appendTo($(element).parent());
            });


        });

    </script>
}

<div id="world-map"></div>

@{
    string displayArtist = Model.NotFound && Model.ArtistName != null ? "display:block" : "display:none";
    string displayPanel = Model.NotFound ? "display:block" : "display:none";
    string displayButton = Model.NotFound ? "display:none" : "display:block";
}

<div id="search_panel" style="@displayPanel">
    <div id="title">Search</div>

    <div id="search_form">
        @using (Html.BeginForm("Search", "Home", FormMethod.Get))
        {
            <p>
                <div class="input-field">
                    @Html.LabelFor(m => m.ArtistName)
                    @Html.TextBoxFor(model => model.ArtistName)

                    <div class="" style="@displayArtist">
                        <div id="artistError" class="error">Artist not found</div>
                    </div>

                </div>


                @Html.CheckBoxFor(m => m.isUpcoming, new { @checked = "checked", id = "isUpcoming", onclick = "upcomingChanged(this)" })
                @Html.LabelFor(m => m.isUpcoming)
                <br />
                @Html.CheckBoxFor(model => model.isPast, new { @checked = "checked", id = "isPast", onclick = "pastChanged(this)" })
                @Html.LabelFor(m => m.isPast)
                <br />
                @Html.CheckBoxFor(model => model.dates, new { id = "dates", onclick = "datesChanged(this)" })
                @Html.LabelFor(m => m.dates)
                <br />
                @Html.LabelFor(m => m.fromDate)
                @Html.EditorFor(model => model.fromDate, new { @type = "date", id = "fromDate" })
                <br />
                @Html.LabelFor(m => m.toDate)
                @Html.EditorFor(model => model.toDate, new { @type = "date", id = "toDate" })
                <br />

                <input class="btn-large z-depth-3" type="submit" value="Search" id="search_button"  />
            </p>
        }
    </div>

    <button onclick="hide()" id="hide_button" class="btn waves-light">Hide</button>
</div>

<div id="stat_panel" class="z-depth-5">

    <div id="stat_title"><span>Statistics</span></div>

    <ul class="tabs tabs-fixed-width" id="tabBar">
        <li class="tab"><a href="#regionStat">Region stat</a></li>
        <li class="tab"><a href="#countryStat">Country stat</a></li>
        <li class="tab"><a href="#cityStat">City Stat</a></li>
    </ul>

    <div class="stats" id="regionStat">
        <div class="charts" id="regionChart">
        </div>
    </div>
    <div class="stats" id="countryStat">
        <div class="charts" id="countryChart">
        </div>
    </div>
    <div class="stats" id="cityStat">
        <div class="charts" id="cityChart">
        </div>
    </div>

    <button onclick="hideStat()" id="hideStat_button" class="btn waves-light">Hide</button>

</div>

<a class="waves-effect waves-light btn showSearchPanelButton z-depth-5" onclick="show()" id="show_button" style="@displayButton">Search</a>
<a class="waves-effect waves-light btn showStatPanelButton z-depth-5" onclick="showStat()" id="stat_button">Stat</a>

@if (!Model.NotFound)
{
    <div id="artistNameOnMap">
        @Model.ArtistName.ToUpper()
    </div>
}
