@model ConcertMap.Models.Events

@using ConcertMap.App_Code.Helper

@{
    ViewBag.Title = "ConcertMap";
}

@section Scripts {


    <script>


        $(function () {

            $("#fromDate").attr('readonly',true);
            $("#toDate").attr('readonly',true);

            @{

                //Source of map color
                var concertData = MapManager.CreateCountryData(Model.events);

                //Source of map markers
                var markersData = MapManager.GetMarkers(Model.events);

                //Stat
                var stat = MapManager.CreateStat(concertData, Model.events);


            }

            var markersDataSerialized = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(markersData))
            var concertDataSerialized = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(concertData));

            var mapObj = new jvm.Map({

                container: $('#world-map'),
                map: 'world_mill',
                normalizeFunction: 'polynomial',
                markerStyle: {
                    initial: {
                        fill: '#B88A99',
                        stroke: '#805563',
                        r: 3
                    }
                },
                backgroundColor: '#A1ABB5',
                markers: markersDataSerialized,
                series: {
                    regions: [{
                        values: concertDataSerialized,
                        scale: ['#33F259', '#176326'],
                        normalizeFunction: 'polynomial',
                        attribute: 'fill'
                    }]
                }
            });

            $('input[type=hidden]').each(function (index, element) {
                $(element).appendTo($(element).parent());
            });

        });


        function hide() {
            $("#show_button").show();
            $("#search_panel").hide("drop",{ direction: "left" }, "slow" );

        }


        function show() {
            $("#search_panel").show("drop",{ direction: "left" }, "slow" );
            $("#show_button").hide();
        }


        function upcomingChanged(cb) {

            var isChecked = $(cb).prop("checked");
            var isCheckedPast = $("#past").prop("checked");

            if (isChecked) {
                if (!isCheckedPast)
                    $("#fromDate").val(getCurrentDate());
                $("#toDate").val("2100-01-01");

            } else
            {
                if (isCheckedPast) $("#fromDate").val("1900-01-01");
                $("#toDate").val(getCurrentDate());

            }

        }

        function pastChanged(cb) {

            var isChecked = $(cb).prop("checked");
            var isCheckedUpcoming = $("#upcoming").prop("checked");

            if (isChecked) {
                if (!isCheckedUpcoming)
                    $("#toDate").val(getCurrentDate());
                $("#fromDate").val("1900-01-01");

            } else {
                if (isCheckedUpcoming) $("#toDate").val("2100-01-01");
                $("#fromDate").val(getCurrentDate());

            }
        }

        function datesChanged(cb) {
            var isChecked = $(cb).prop("checked");

            if (isChecked) {
                $("#isUpcoming").attr("disabled","disabled");
                $("#isPast").attr("disabled","disabled");
                $("#toDate").attr('readonly',false);
                $("#fromDate").attr('readonly',false);
            } else {
                $("#isUpcoming").removeAttr("disabled");
                $("#isPast").removeAttr("disabled");
                $("#fromDate").attr('readonly',true);
                $("#toDate").attr('readonly',true);
            }
        }

        function showStat() {
            $("#stat_panel").show("drop",{ direction: "right", complete: statPanelShowed }, "slow" );
            $("#stat_button").hide();
        }

        function hideStat() {
            $("#stat_button").show();
            $("#stat_panel").hide("drop",{ direction: "right", complete: statPanelHided }, "slow" );
        }

        function statPanelShowed() {

            //$("regionChart").css("display","block");

            var regionChart = createChart("regionChart","Region stat");

            var countryChart = createChart("countryChart","Country Stat");

            var cityChart = createChart("cityChart","City Stat");

            regionChart.render();
            countryChart.render();
            cityChart.render();

        }

        function createChart(containerName, titleText) {

            var chart = new CanvasJS.Chart(containerName, {
                title: {
                    text: titleText,
                    fontFamily: "Verdana",
                    fontColor: "Peru",
                    fontSize: 28

                },
                width: 300,
                animationEnabled: true,
                backgroundColor: '#edf7ee',
                axisY: {
                    tickThickness: 0,
                    lineThickness: 0,
                    valueFormatString: " ",
                    gridThickness: 0
                },
                axisX: {
                    tickThickness: 0,
                    lineThickness: 0,
                    labelFontSize: 18,
                    labelFontColor: "Peru",
                    interval:1
                },
                data: [
                {
                    indexLabelFontSize: 26,
                    toolTipContent: "<span style='\"'color: {color};'\"'><strong>{indexLabel}</strong></span><span style='\"'font-size: 20px; color:peru '\"'><strong>{y}</strong></span>",

                    indexLabelPlacement: "inside",
                    indexLabelFontColor: "white",
                    indexLabelFontWeight: 600,
                    indexLabelFontFamily: "Verdana",
                    color: "#62C9C3",
                    type: "bar",
                    dataPoints: [
                        { y: 21, label: "21%", indexLabel: "Video" },
                        { y: 25, label: "25%", indexLabel: "Dining" },
                        { y: 33, label: "33%", indexLabel: "Entertainment" },
                        { y: 36, label: "36%", indexLabel: "News" },
                        { y: 42, label: "42%", indexLabel: "Music" },
                        { y: 49, label: "49%", indexLabel: "Social Networking" },
                        { y: 50, label: "50%", indexLabel: "Maps/ Search" },
                        { y: 55, label: "55%", indexLabel: "Weather" },
                        { y: 61, label: "61%", indexLabel: "Games" }
                    ]
                }
                ]
            });

            return chart;
        }

        function statPanelHided() {

            //$("regionChart").css("display","none");

        }

        function getCurrentDate() {

            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth()+1;

            var yyyy = today.getFullYear();
            if(dd<10){
                dd='0'+dd
            }
            if(mm<10){
                mm='0'+mm
            }
            var today = yyyy+"-"+mm+"-"+dd;

            return today;
        }

    </script>
}

<div id="world-map" style="height: 100%"></div>

<div id="search_panel">
    <div id="title">Search</div>

    <div id="search_form">
        @using (Html.BeginForm("Search", "Home", FormMethod.Get))
        {
            <p>
                <div class="input-field">
                    @Html.LabelFor(m => m.ArtistName)
                    @Html.TextBoxFor(model => model.ArtistName) <br />
                </div>

                @Html.CheckBoxFor(m => m.isUpcoming, new { @checked = "checked", id = "isUpcoming", onclick = "upcomingChanged(this)" })
                @Html.LabelFor(m => m.isUpcoming)
                <br />
                @Html.CheckBoxFor(model => model.isPast, new { @checked = "checked", id = "isPast", onclick = "pastChanged(this)" })
                @Html.LabelFor(m => m.isPast)
                <br />
                @Html.CheckBoxFor(model => model.dates, new { id = "dates", onclick = "datesChanged(this)" })
                @Html.LabelFor(m => m.dates)
                <br />
                @Html.LabelFor(m => m.fromDate)
                @Html.EditorFor(model => model.fromDate, new { @type = "date", id = "fromDate" })
                <br />
                @Html.LabelFor(m => m.toDate)
                @Html.EditorFor(model => model.toDate, new { @type = "date", id = "toDate" })
                <br />

                <input class="btn" type="submit" value="Search" id="search_button" />
            </p>
        }
    </div>

    <button onclick="hide()" id="hide_button" class="button">Hide</button>
</div>

<div id="stat_panel">

    <div id="stat_title" ;><span>Statistics</span></div>

    <ul class="tabs tabs-fixed-width">
        <li class="tab"><a href="#regionStat">Region stat</a></li>
        <li class="tab"><a href="#countryStat">Country stat</a></li>
        <li class="tab"><a href="#cityStat">City Stat</a></li>
    </ul>

    <div id="regionStat" style="margin-top:10px">
        <div id="regionChart" style="height: 300px; width: 280px; margin: 0 auto;">
        </div>
    </div>
    <div id="countryStat" style="margin-top:10px">
        <div id="countryChart" style="height: 300px; width: 280px; margin: 0 auto;">
        </div>
    </div>
    <div id="cityStat" style="margin-top:10px">
        <div id="cityChart" style="height: 300px; width: 280px; margin: 0 auto;">
        </div>
    </div>

    <button onclick="hideStat()" id="hideStat_button" class="button">Hide</button>
</div>

<a class="waves-effect waves-light btn showSearchPanelButton" onclick="show()" id="show_button">Search</a>
<a class="waves-effect waves-light btn showStatPanelButton" onclick="showStat()" id="stat_button">Stat</a>

@*<button onclick="show()" id="show_button" class="button showSearchPanelButton">Search</button>*@

@*<button onclick="showStat()" id="stat_button" class="button showStatPanelButton">Stat</button>*@

